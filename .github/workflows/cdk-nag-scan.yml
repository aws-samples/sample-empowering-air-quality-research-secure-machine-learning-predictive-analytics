name: CDK Nag Scan

on:
  push:
    # only trigger on branches, not on tags
    branches: 
      - '**'
  pull_request:
    branches:
      - '*'
  workflow_dispatch:
      inputs:
        name:
          description: "test"
          default: "test"

jobs:
  cdk-nag-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Silence Node.js version warning
        run: |
          # Silence Node.js version warning to avoid unnecessary output
          export JSII_SILENCE_WARNING_UNTESTED_NODE_VERSION=1
      
      - name: Run setup script
        run: |
          # Make the setup script executable
          chmod +x ./bin/setup.sh
          
          # Run the setup script which will:
          # - Create and activate a virtual environment
          # - Install required dependencies
          # - Create pre and post configs with default values
          # - Prepare Lambda layer packages
          # - Bootstrap the AWS CDK stack
          # - Synthesize the AWS CDK stack
          ./bin/setup.sh
      
      - name: Run CDK Nag
        run: |
          # Activate the virtual environment created by setup.sh
          source .venv/bin/activate
          
          cd infra
          
          # Extract stack name from pre-deployment-config.ini
          STACK_NAME=$(python3 -c 'import configparser; config = configparser.ConfigParser(); config.read("scripts/pre-deployment-config.ini"); prefix = config["defaults"]["project_prefix"] if "defaults" in config and "project_prefix" in config["defaults"] else "demoapp"; print(prefix.capitalize() + "Stack")')
          
          echo "Running CDK Nag on mock stack"
          CDK_NAG=true npx cdk synth || { echo "CDK synth failed"; exit 1; }
          
          # Check if there are any warnings in the output
          if [ -f "cdk.out/manifest.json" ] && grep -q "CDK-NAG-WARNING" cdk.out/manifest.json; then
            echo "CDK Nag found warnings in the stack"
            grep -A 5 "CDK-NAG-WARNING" cdk.out/manifest.json
            exit 1
          else
            echo "No CDK Nag warnings found"
          fi
