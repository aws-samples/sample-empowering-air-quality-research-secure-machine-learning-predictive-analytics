name: CDK Nag Scan

on:
  push:
    # only trigger on branches, not on tags
    branches: 
      - '**'
  pull_request:
    branches:
      - '*'
  workflow_dispatch:
      inputs:
        name:
          description: "test"
          default: "test"

jobs:
  cdk-nag-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          cd infra
          pip install -r requirements.txt
          pip install cdk-nag
      
      - name: Create configuration files
        run: |
          cd infra
          # Create pre-deployment config file
          mkdir -p scripts
          cat > scripts/pre-deployment-config.ini << EOL
          [defaults]
          initial_data_file = init_data.csv
          project_prefix = demoapp
          EOL
          
          # Create post-deployment config file
          cat > scripts/post-deployment-config.ini << EOL
          [defaults]
          canvas_model_endpoint_name = canvas-demo-deployment
          EOL
          
          echo "Created configuration files"
      
      - name: Prepare Lambda layers
        run: |
          # Create Lambda layer directory structure
          mkdir -p lambda_layer/common/python/common
          
          # Create a minimal Lambda layer zip file
          cd lambda_layer/common
          echo "# Placeholder" > python/common/__init__.py
          zip -rq common_layer.zip python
          cd ../..
          
          echo "Lambda layers prepared"
      
      - name: Modify CDK stack for testing
        run: |
          # Create a modified version of the lambda_stack.py file that skips the Lambda layer creation
          cd infra/cdk_stack
          
          # Backup the original file
          cp lambda_stack.py lambda_stack.py.bak
          
          # Modify the file to use a dummy layer
          sed -i 's/self.create_lambda_layer(/self._create_dummy_layer(/g' lambda_stack.py
          
          # Add the dummy layer method
          cat >> lambda_stack.py << 'EOL'
          
          def _create_dummy_layer(self, id, description, layer_path, compatible_runtimes=None):
              """Create a dummy layer for testing purposes"""
              from aws_cdk import aws_lambda as _lambda
              
              return _lambda.LayerVersion(
                  self,
                  id,
                  code=_lambda.Code.from_asset(layer_path),
                  compatible_runtimes=compatible_runtimes,
                  description=description,
              )
          EOL
          
          echo "Modified CDK stack for testing"
      
      - name: Run CDK Nag
        run: |
          cd infra
          # Extract stack name from pre-deployment-config.ini
          STACK_NAME=$(python3 -c 'import configparser; config = configparser.ConfigParser(); config.read("scripts/pre-deployment-config.ini"); prefix = config["defaults"]["project_prefix"] if "defaults" in config and "project_prefix" in config["defaults"] else "demoapp"; print(prefix.capitalize() + "Stack")')
          
          echo "Running CDK Nag on stack: $STACK_NAME"
          
          # Run cdk synth with CDK_NAG=true to enable nag checks
          CDK_NAG=true npx cdk synth "$STACK_NAME" || exit 1
          
          # Check if there are any warnings in the output
          if grep -q "CDK-NAG-WARNING" cdk.out/manifest.json; then
            echo "CDK Nag found warnings in the stack"
            grep -A 5 "CDK-NAG-WARNING" cdk.out/manifest.json
            exit 1
          else
            echo "No CDK Nag warnings found"
          fi
